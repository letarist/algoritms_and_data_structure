"""Сформировать из введенного числа обратное по порядку входящих в него цифр
 и вывести на экран. Например, если введено число 3486, надо вывести 6843."""

import timeit
import cProfile

BASE = 10


def digit_reverse(digit):
    res = 0
    while digit > 0:
        res = res * BASE + digit % BASE
        digit //= BASE
    return res


print(timeit.timeit('digit_reverse(12)', number=1000, globals=globals()))  # 0.0002648000000000008
print(timeit.timeit('digit_reverse(121)', number=1000, globals=globals()))  # 0.0002853999999999999
print(timeit.timeit('digit_reverse(1221)', number=1000, globals=globals()))  # 0.00039579999999999997
print(timeit.timeit('digit_reverse(12321)', number=1000, globals=globals()))  # 0.00047670000000000004
print(timeit.timeit('digit_reverse(123321)', number=1000, globals=globals()))  # 0.0005820000000000027
print(timeit.timeit('digit_reverse(12345674312345342123)', number=1000, globals=globals()))  # 0.0026777000000000016
print(timeit.timeit('digit_reverse(123456743123497069867979065342123)', number=1000,
                    globals=globals()))  # 0.004940699999999999
print(timeit.timeit('digit_reverse(12345674312349706986743536634634466442123)', number=1000,
                    globals=globals()))  # 0.006199900000000001
print(timeit.timeit('digit_reverse(12345674312349706986734453454353453453453455345343542123)', number=1000,
                    globals=globals()))  # 0.008964899999999998
print(timeit.timeit('digit_reverse(12345674312349706986734453454353453453453455345343542123565645656456644565656656)'
                    , number=1000, globals=globals()))  # 0.013291900000000002

cProfile.run(
    'digit_reverse(1231243547687978890785674323293523952368562836582357836257325723568787253787235563878287542354364565'
    '645635342423424345645645646423423425367987980890667979797898797897979756757586970808908908908908989090004242342344'
    '234234324242342424234242342467678679789898908876856745456464534523423424235345687978890890890890898979798797056464'
    '456457567563452345345345645645654756756757453432453453453464565756756756753464575686778898098908908908909524312441'
    '436456768678785674534245345456567678978989899089009909090086796563424243545767867979889789797090999990908676766834'
    '234235464657564523423656788987989678675645634546566876778978978978967856756453453453453453454565675676786788678643'
    '234245456765654322435467567678678678678567456463435354565675686786786786585674563453342423434656897897896797896793'
    '342345345464566575754746345234234123131231313423534534565676786787867878797897899000998787667452342547567876789845'
    '2342343465768678786785674563452342342343454575675674563452354235434564756878978099678567452342423547566778767868)')
# Ordered by: standard name
#
# ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#      1    0.000    0.000    0.001    0.001 <string>:1(<module>)
#      1    0.001    0.001    0.001    0.001 less_4_task_1.2.py:8(digit_reverse)
#      1    0.000    0.000    0.001    0.001 {built-in method builtins.exec}
#      1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}


# В данном решении задачи использовался цикл while для отделения от исходной цифры последнего числа, и записи этих чисел
# в обратном порядке
# Оценка задачи со стороны асимптотики: асимптотика линейная
